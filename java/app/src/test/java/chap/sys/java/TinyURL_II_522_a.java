package chap.sys.java;

import java.util.HashMap;
import java.util.Map;
import java.util.Random;

import org.junit.Test;

/*-
As a follow up for Tiny URL, we are going to support custom tiny url, so that user can create their own tiny url. That is to say, you need to implement one more createCustom than 232. Tiny Url.

You should implement three methods:

longToShort(url) Convert a long url to a short url which starts with http://tiny.url/.
shortToLong(url) Convert a short url to a long url.
createCustom(url, key) Set the short url of a long url to http://tiny.url/ + key
You can design any shorten algorithm, the judge only cares about:

The length of short key' generated by longToShort should equal to 6 (without domain and slash). And the acceptable characters are [a-zA-Z0-9]. For example: abcD9E
No two long urls mapping to the same short url and no two short urls mapping to the same long url.
If createCustom can not meet users' expectment, return "error"; otherwise return the short url.
*/
public class TinyURL_II_522_a {
    @Test public void test1() {
        TinyUrl2 tu = new TinyUrl2();
        // System.out.println( tu.shortToLong( tu.longToShort("http://www.lintcode.com/faq/?id=10") ) );
        // System.out.println( tu.shortToLong( tu.longToShort("http://www.lintcode.com/faq/?id=10") ) );

        System.out.println( tu.createCustom("http://www.lintcode.com/", "lccode") );
        System.out.println( tu.shortToLong("http://tiny.url/lccode") );
        System.out.println( tu.createCustom("http://www.lintcode.com/", "ltcode") );
    }

    @Test public void test2() {
        TinyUrl2 tu = new TinyUrl2();

        System.out.println( tu.longToShort("http://www.lintcode.com/") );
        System.out.println( tu.createCustom("http://www.lintcode.com/", "ltcode") );
    }

    @Test public void test3() {
        TinyUrl2 tu = new TinyUrl2();

        System.out.println( tu.createCustom("http://www.facebook.com", "facebook") );
        System.out.println( tu.createCustom("http://www.facebook.com", "facebook") );
    }

    /**
     * 您的提交打败了 37.20% 的提交!
     */
    class TinyUrl2 {
        Map<String, String> s2l;
        Map<String, String> l2s;
        Random rand;
        String chars = "0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ";
        String prefix = "http://tiny.url/";

        public TinyUrl2() {
            rand = new Random();
            s2l = new HashMap<>();
            l2s = new HashMap<>();
        }
        /*
         * @param long_url: a long url
         * @param key: a short key
         * @return: a short url starts with http://tiny.url/
         */
        public String createCustom(String long_url, String key) {
            // write your code here
            String sh_url = prefix + key;
            if (l2s.containsKey(long_url)) {
                if (!l2s.get(long_url).equals(sh_url)) {
                    return "error";
                }
                return l2s.get(long_url);
            }
            if (s2l.containsKey(sh_url)) {
                if (!s2l.get(sh_url).equals(long_url)) {
                    return "error";
                }
            }
            l2s.put(long_url, sh_url);
            s2l.put(sh_url, long_url);
            return sh_url;
        }

        /*
         * @param long_url: a long url
         * @return: a short url starts with http://tiny.url/
         */
        public String longToShort(String long_url) {
            // write your code here
            if (l2s.containsKey(long_url)) {
                return l2s.get(long_url);
            }
            while (true) {
                String sixrand = genShort(long_url);
                String sh_url = prefix+sixrand;
                if (!s2l.containsKey(sh_url)) {
                    s2l.put(sh_url, long_url);
                    l2s.put(long_url, sh_url);
                    break;
                }
            }
            return l2s.get(long_url);
        }

        /*
         * @param short_url: a short url starts with http://tiny.url/
         * @return: a long url
         */
        public String shortToLong(String short_url) {
            // write your code here
            if (s2l.containsKey(short_url)) {
                return s2l.get(short_url);
            }
            return "error";
        }

        private String genShort(String long_url) {
            StringBuilder sb = new StringBuilder();
            for (int i = 0; i < 6; i++) {
                sb.append( chars.charAt( rand.nextInt(62)) );
            }
            return sb.toString();
        }
    }
}
